/*
Deployment script for CampPerry

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar SpringfieldProd "SpringfieldProd"
:setvar TripodDW "TripodDW"
:setvar DatabaseName "CampPerry"
:setvar DefaultFilePrefix "CampPerry"
:setvar DefaultDataPath "E:\MSSQL\Data\"
:setvar DefaultLogPath "D:\MSSQL\Logs\"
:setvar BackupPath "D:\MSSQL\Backup\"
:setvar BackupFile "CampPerry_LaptopDeployment_YYYYMMDD_HHMMSS.bak"


GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix).mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix).ldf') COLLATE SQL_Latin1_General_CP1_CI_AI
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET CHANGE_TRACKING = ON(AUTO_CLEANUP = ON, CHANGE_RETENTION = 3 DAYS) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[CodeMast]...';


GO
CREATE TABLE [dbo].[CodeMast] (
    [Recnum]      BIGINT       IDENTITY (1, 1) NOT NULL,
    [TYPE]        VARCHAR (10) NOT NULL,
    [CODE]        VARCHAR (10) NOT NULL,
    [DESCRIPTION] VARCHAR (30) NOT NULL,
    CONSTRAINT [CodeMast_INDEX01] PRIMARY KEY CLUSTERED ([TYPE] ASC, [CODE] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating [dbo].[CodeMast].[CodeMast_INDEX00]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [CodeMast_INDEX00]
    ON [dbo].[CodeMast]([Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[CodeType]...';


GO
CREATE TABLE [dbo].[CodeType] (
    [Recnum]      BIGINT        IDENTITY (1, 1) NOT NULL,
    [TYPE]        VARCHAR (10)  NOT NULL,
    [DESCRIPTION] VARCHAR (30)  NOT NULL,
    [COMMENT]     VARCHAR (MAX) NULL,
    CONSTRAINT [CodeType_INDEX01] PRIMARY KEY CLUSTERED ([TYPE] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating [dbo].[CodeType].[CodeType_INDEX00]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [CodeType_INDEX00]
    ON [dbo].[CodeType]([Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[FedHeaderCampPerry]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [dbo].[FedHeaderCampPerry] (
    [ID]                  BIGINT         IDENTITY (1, 1) NOT NULL,
    [Serial]              VARCHAR (14)   NOT NULL,
    [GunType]             VARCHAR (1)    NOT NULL,
    [Manufacturer]        VARCHAR (10)   NOT NULL,
    [SPRNum]              VARCHAR (20)   NULL,
    [Model]               VARCHAR (10)   NULL,
    [ModelDescription]    VARCHAR (35)   NULL,
    [Caliber]             VARCHAR (10)   NULL,
    [SemiOrFullAuto]      VARCHAR (1)    NULL,
    [BoltNum]             VARCHAR (6)    NULL,
    [Headspace]           NUMERIC (4, 3) NULL,
    [Importer]            VARCHAR (10)   NULL,
    [FirstReceivedDate]   DATE           NULL,
    [Location]            VARCHAR (20)   NULL,
    [ExciseTaxPaidDate]   DATE           NULL,
    [ExciseTaxPaidAmount] NUMERIC (8, 4) NULL,
    [CurrentState]        VARCHAR (1)    NULL,
    [LastLineNum]         SMALLINT       NULL,
    [CreatedBy]           VARCHAR (4)    NULL,
    [CreatedDate]         DATETIME       NULL,
    CONSTRAINT [FedHeaderCampPerry_INDEX01] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 90)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[FedTransCampPerry]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO
CREATE TABLE [dbo].[FedTransCampPerry] (
    [ID]              BIGINT          IDENTITY (1, 1) NOT NULL,
    [HeaderID]        BIGINT          NOT NULL,
    [LineNum]         SMALLINT        NOT NULL,
    [TransactionDate] DATE            NULL,
    [TransactionType] VARCHAR (1)     NULL,
    [Name]            VARCHAR (25)    NULL,
    [Street1]         VARCHAR (35)    NULL,
    [Street2]         VARCHAR (35)    NULL,
    [City]            VARCHAR (15)    NULL,
    [State]           VARCHAR (2)     NULL,
    [Country]         VARCHAR (2)     NULL,
    [FFLNumber]       VARCHAR (10)    NULL,
    [ChangeType]      VARCHAR (2)     NULL,
    [Description]     VARCHAR (60)    NULL,
    [RMA]             INT             NULL,
    [ReceivingTicket] INT             NULL,
    [WorkOrderNumber] INT             NULL,
    [WorkOrderLine]   INT             NULL,
    [OrdNum]          NUMERIC (10, 2) NULL,
    [OrderLineNum]    SMALLINT        NULL,
    [PreviousValue]   VARCHAR (20)    NULL,
    [NewValue]        VARCHAR (20)    NULL,
    [CorrectionFor]   BIGINT          NULL,
    [CorrectedBy]     BIGINT          NULL,
    [Form4473]        INT             NULL,
    [Location]        VARCHAR (20)    NULL,
    [DefectTagNumber] INT             NULL,
    [CreatedBy]       VARCHAR (4)     NOT NULL,
    [CreatedDate]     DATETIME        NOT NULL,
    CONSTRAINT [FedTransCampPerry_INDEX01] PRIMARY KEY CLUSTERED ([ID] ASC) WITH (FILLFACTOR = 90)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[GUNTYPES]...';


GO
CREATE TABLE [dbo].[GUNTYPES] (
    [Recnum]          BIGINT       IDENTITY (1, 1) NOT NULL,
    [CODE]            VARCHAR (1)  NOT NULL,
    [DESC]            VARCHAR (20) NOT NULL,
    [FLAG1]           VARCHAR (1)  NOT NULL,
    [FLAG2]           VARCHAR (1)  NOT NULL,
    [FLAG3]           VARCHAR (1)  NOT NULL,
    [FLAG4]           VARCHAR (1)  NOT NULL,
    [FLAG5]           VARCHAR (1)  NOT NULL,
    [MANUFACT]        VARCHAR (10) NOT NULL,
    [MODEL]           VARCHAR (10) NOT NULL,
    [SEMIFULL]        VARCHAR (1)  NOT NULL,
    [NAME]            VARCHAR (25) NOT NULL,
    [STREET]          VARCHAR (20) NOT NULL,
    [CITY]            VARCHAR (15) NOT NULL,
    [STATE]           VARCHAR (2)  NOT NULL,
    [NUM_SER_TO_ENT]  DECIMAL (6)  NOT NULL,
    [NUM_SER_NOT_ENT] DECIMAL (6)  NOT NULL,
    [PREFIX]          VARCHAR (2)  NOT NULL,
    [SUFFIX]          VARCHAR (1)  NOT NULL,
    [PRINTED]         VARCHAR (1)  NOT NULL,
    CONSTRAINT [GUNTYPES_INDEX01] PRIMARY KEY CLUSTERED ([CODE] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating [dbo].[GUNTYPES].[GUNTYPES_INDEX00]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [GUNTYPES_INDEX00]
    ON [dbo].[GUNTYPES]([Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[parts]...';


GO
CREATE TABLE [dbo].[parts] (
    [Recnum]                   BIGINT          IDENTITY (1, 1) NOT NULL,
    [SPRNUM]                   VARCHAR (20)    NOT NULL,
    [DESC]                     VARCHAR (35)    NOT NULL,
    [ORIGAMNT]                 DECIMAL (8)     NOT NULL,
    [RAW]                      DECIMAL (10)    NOT NULL,
    [WIP]                      DECIMAL (10)    NOT NULL,
    [FIN]                      DECIMAL (10)    NOT NULL,
    [ASSIGNED]                 DECIMAL (10)    NOT NULL,
    [REORDPNT]                 DECIMAL (10)    NOT NULL,
    [ONORD]                    DECIMAL (10)    NOT NULL,
    [FULL]                     DECIMAL (10)    NOT NULL,
    [YSHIP]                    DECIMAL (10)    NOT NULL,
    [YA]                       DECIMAL (10)    NOT NULL,
    [YP]                       DECIMAL (10)    NOT NULL,
    [LSALE]                    DATETIME        NOT NULL,
    [COSTRAW]                  DECIMAL (12, 6) NOT NULL,
    [COSTWIP]                  DECIMAL (12, 6) NOT NULL,
    [COSTFIN]                  DECIMAL (12, 6) NOT NULL,
    [DEALER]                   DECIMAL (8, 2)  NOT NULL,
    [RETAIL]                   DECIMAL (8, 2)  NOT NULL,
    [Z]                        VARCHAR (1)     NOT NULL,
    [UPC]                      VARCHAR (15)    NOT NULL,
    [DEFRAW]                   DECIMAL (8)     NOT NULL,
    [DEFWIP]                   DECIMAL (8)     NOT NULL,
    [DEFFIN]                   DECIMAL (8)     NOT NULL,
    [GUNTYPE]                  VARCHAR (1)     NOT NULL,
    [GUNSTOCK]                 VARCHAR (6)     NOT NULL,
    [DELIVERY]                 DATETIME        NOT NULL,
    [NOTE]                     VARCHAR (40)    NOT NULL,
    [Overhead]                 DECIMAL (10, 4) NOT NULL,
    [IndirectLabor]            DECIMAL (10, 4) NOT NULL,
    [DirectLabor]              DECIMAL (10, 4) NOT NULL,
    [MaterialCost]             DECIMAL (10, 4) NOT NULL,
    [SubContractor]            DECIMAL (10, 4) NOT NULL,
    [SUB2]                     DECIMAL (10, 4) NOT NULL,
    [SUB3]                     DECIMAL (10, 4) NOT NULL,
    [FREIGHT]                  DECIMAL (10, 4) NOT NULL,
    [EXCISE]                   DECIMAL (10, 4) NOT NULL,
    [CALIBER]                  VARCHAR (10)    NOT NULL,
    [COMPANY_#]                VARCHAR (2)     NOT NULL,
    [DIVISION_#]               VARCHAR (2)     NOT NULL,
    [ACCOUNT_ID]               VARCHAR (5)     NOT NULL,
    [NSN_#]                    VARCHAR (12)    NOT NULL,
    [FS_#]                     VARCHAR (10)    NOT NULL,
    [VENDOR_INFO]              VARCHAR (50)    NOT NULL,
    [DESC_2]                   VARCHAR (35)    NOT NULL,
    [RESERVED]                 DECIMAL (8)     NOT NULL,
    [INTERNAT_FLAG]            VARCHAR (1)     NOT NULL,
    [PRICE_EDIT]               VARCHAR (1)     NOT NULL,
    [INSPECT_FLAG]             VARCHAR (1)     NOT NULL,
    [SCRAP]                    DECIMAL (8)     NOT NULL,
    [COSTSCRAP]                DECIMAL (10, 4) NOT NULL,
    [PURCH_FLAG]               VARCHAR (1)     NOT NULL,
    [RECEIVE_TO]               VARCHAR (1)     NOT NULL,
    [SCOMPANY_#]               VARCHAR (2)     NOT NULL,
    [SDIVISION_#]              VARCHAR (2)     NOT NULL,
    [SACCOUNT_ID]              VARCHAR (5)     NOT NULL,
    [PR_SHT_DESC]              VARCHAR (102)   NOT NULL,
    [RAW_ASSIGNED]             DECIMAL (10)    NOT NULL,
    [FREIGHT_FLAG]             VARCHAR (1)     NOT NULL,
    [BREAKDOWN_FLAG]           VARCHAR (1)     NOT NULL,
    [GROUP1]                   VARCHAR (1)     NOT NULL,
    [RPT_GROUP]                VARCHAR (6)     NOT NULL,
    [LOT_SIZE]                 DECIMAL (8)     NOT NULL,
    [CUSTOM_COUNT]             DECIMAL (8)     NOT NULL,
    [SERIAL_FLAG]              VARCHAR (1)     NOT NULL,
    [WHLS_QTY1]                DECIMAL (6)     NOT NULL,
    [WHLS_PRCNT1]              DECIMAL (4, 2)  NOT NULL,
    [WHLS_QTY2]                DECIMAL (6)     NOT NULL,
    [WHLS_PRCNT2]              DECIMAL (4, 2)  NOT NULL,
    [WHLS_QTY3]                DECIMAL (6)     NOT NULL,
    [WHLS_PRCNT3]              DECIMAL (4, 2)  NOT NULL,
    [WHLS_QTY4]                DECIMAL (6)     NOT NULL,
    [WHLS_PRCNT4]              DECIMAL (4, 2)  NOT NULL,
    [DLR_QTY1]                 DECIMAL (6)     NOT NULL,
    [DLR_PRCNT1]               DECIMAL (4, 2)  NOT NULL,
    [DLR_QTY2]                 DECIMAL (6)     NOT NULL,
    [DLR_PRCNT2]               DECIMAL (4, 2)  NOT NULL,
    [DLR_QTY3]                 DECIMAL (6)     NOT NULL,
    [DLR_PRCNT3]               DECIMAL (4, 2)  NOT NULL,
    [DLR_QTY4]                 DECIMAL (6)     NOT NULL,
    [DLR_PRCNT4]               DECIMAL (4, 2)  NOT NULL,
    [RTL_QTY1]                 DECIMAL (6)     NOT NULL,
    [RTL_PRCNT1]               DECIMAL (4, 2)  NOT NULL,
    [RTL_QTY2]                 DECIMAL (6)     NOT NULL,
    [RTL_PRCNT2]               DECIMAL (4, 2)  NOT NULL,
    [RTL_QTY3]                 DECIMAL (6)     NOT NULL,
    [RTL_PRCNT3]               DECIMAL (4, 2)  NOT NULL,
    [RTL_QTY4]                 DECIMAL (6)     NOT NULL,
    [RTL_PRCNT4]               DECIMAL (4, 2)  NOT NULL,
    [WHOLESALE]                DECIMAL (8, 2)  NOT NULL,
    [VENDOR_ID]                VARCHAR (8)     NOT NULL,
    [FIREARM_FLAG]             VARCHAR (1)     NOT NULL,
    [TAX_FLAG]                 VARCHAR (1)     NOT NULL,
    [EXCISE_TYPE]              VARCHAR (1)     NOT NULL,
    [UOM_DESC]                 VARCHAR (4)     NOT NULL,
    [LEAD_TIME]                DECIMAL (6)     NOT NULL,
    [INVAVGPRICE]              DECIMAL (14, 4) NOT NULL,
    [WOASSIGNED]               DECIMAL (10)    NOT NULL,
    [OEASSIGNED]               DECIMAL (10)    NOT NULL,
    [BARREL_LENGTH]            DECIMAL (4, 2)  NOT NULL,
    [FINISH]                   VARCHAR (20)    NOT NULL,
    [SELLABLE]                 VARCHAR (1)     NOT NULL,
    [ACTIVE]                   VARCHAR (1)     NOT NULL,
    [DRAWING_NUMBER]           VARCHAR (20)    NOT NULL,
    [REVISION_NUMBER]          DECIMAL (4)     NOT NULL,
    [Sale_Notes]               VARCHAR (MAX)   NULL,
    [Tech_Notes]               VARCHAR (MAX)   NULL,
    [Part_Type]                VARCHAR (1)     NOT NULL,
    [Part_Category]            VARCHAR (10)    NOT NULL,
    [LawEnf_Price]             DECIMAL (10, 2) NOT NULL,
    [Star_Price]               DECIMAL (10, 2) NOT NULL,
    [BoxStore_Price]           DECIMAL (10, 2) NOT NULL,
    [BuyGroup_Price]           DECIMAL (10, 2) NOT NULL,
    [HASSERIAL]                VARCHAR (1)     NOT NULL,
    [CreatedBy]                VARCHAR (4)     NOT NULL,
    [CreatedDate]              DATETIME        NOT NULL,
    [ChangedBy]                VARCHAR (4)     NOT NULL,
    [ChangedDate]              DATETIME        NOT NULL,
    [Version]                  VARCHAR (15)    NOT NULL,
    [UpdateSysInven]           VARCHAR (1)     NULL,
    [Capacity]                 VARCHAR (4)     NULL,
    [Location]                 VARCHAR (1)     NULL,
    [Aisle]                    VARCHAR (10)    NULL,
    [Rack]                     VARCHAR (10)    NULL,
    [Tier]                     VARCHAR (10)    NULL,
    [Bin]                      VARCHAR (10)    NULL,
    [ExciseTaxTotalMatCost]    NUMERIC (12, 4) NULL,
    [ExciseTaxTotalMatTaxCost] NUMERIC (12, 4) NULL,
    [ExciseTaxLaborCost]       NUMERIC (12, 4) NULL,
    [ExciseTaxRatio]           NUMERIC (12, 4) NULL,
    [ExciseTaxAdjustedTax]     NUMERIC (12, 4) NULL,
    [ExciseTaxLaborTaxCost]    NUMERIC (12, 4) NULL,
    [ThreadedBarrel]           VARCHAR (1)     NULL,
    [SubCategory]              VARCHAR (10)    NULL,
    [Packed]                   BIGINT          NOT NULL,
    [PulledToWO]               BIGINT          NOT NULL,
    CONSTRAINT [parts_INDEX01] PRIMARY KEY CLUSTERED ([SPRNUM] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating [dbo].[parts].[parts_INDEX00]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [parts_INDEX00]
    ON [dbo].[parts]([Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[parts].[parts_INDEX02]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [parts_INDEX02]
    ON [dbo].[parts]([RPT_GROUP] ASC, [SPRNUM] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[parts].[parts_INDEX03]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [parts_INDEX03]
    ON [dbo].[parts]([VENDOR_ID] ASC, [SPRNUM] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[parts].[parts_INDEX04]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [parts_INDEX04]
    ON [dbo].[parts]([DESC] ASC, [SPRNUM] ASC, [Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[parts].[parts_INDEX05]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [parts_INDEX05]
    ON [dbo].[parts]([Part_Type] ASC, [SPRNUM] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[parts].[parts_INDEX06]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [parts_INDEX06]
    ON [dbo].[parts]([UPC] ASC, [SPRNUM] ASC);


GO
PRINT N'Creating [dbo].[SMSUPPLY]...';


GO
CREATE TABLE [dbo].[SMSUPPLY] (
    [Recnum]   BIGINT       IDENTITY (1, 1) NOT NULL,
    [SUPPLIER] VARCHAR (10) NOT NULL,
    [NAME]     VARCHAR (25) NOT NULL,
    [STREET]   VARCHAR (20) NOT NULL,
    [CITY]     VARCHAR (15) NOT NULL,
    [STATE]    VARCHAR (2)  NOT NULL,
    [FFLNUM]   VARCHAR (10) NOT NULL,
    CONSTRAINT [SMSUPPLY_INDEX01] PRIMARY KEY CLUSTERED ([SUPPLIER] ASC) WITH (FILLFACTOR = 70)
);


GO
PRINT N'Creating [dbo].[SMSUPPLY].[SMSUPPLY_INDEX00]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [SMSUPPLY_INDEX00]
    ON [dbo].[SMSUPPLY]([Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating [dbo].[SMSUPPLY].[SMSUPPLY_INDEX02]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [SMSUPPLY_INDEX02]
    ON [dbo].[SMSUPPLY]([NAME] ASC, [Recnum] ASC) WITH (FILLFACTOR = 70);


GO
PRINT N'Creating unnamed constraint on [dbo].[CodeMast]...';


GO
ALTER TABLE [dbo].[CodeMast]
    ADD DEFAULT (' ') FOR [TYPE];


GO
PRINT N'Creating unnamed constraint on [dbo].[CodeMast]...';


GO
ALTER TABLE [dbo].[CodeMast]
    ADD DEFAULT (' ') FOR [CODE];


GO
PRINT N'Creating unnamed constraint on [dbo].[CodeMast]...';


GO
ALTER TABLE [dbo].[CodeMast]
    ADD DEFAULT (' ') FOR [DESCRIPTION];


GO
PRINT N'Creating unnamed constraint on [dbo].[CodeType]...';


GO
ALTER TABLE [dbo].[CodeType]
    ADD DEFAULT (' ') FOR [TYPE];


GO
PRINT N'Creating unnamed constraint on [dbo].[CodeType]...';


GO
ALTER TABLE [dbo].[CodeType]
    ADD DEFAULT (' ') FOR [DESCRIPTION];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedHeaderCampPerry]...';


GO
ALTER TABLE [dbo].[FedHeaderCampPerry]
    ADD DEFAULT (' ') FOR [Serial];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedHeaderCampPerry]...';


GO
ALTER TABLE [dbo].[FedHeaderCampPerry]
    ADD DEFAULT (' ') FOR [GunType];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedHeaderCampPerry]...';


GO
ALTER TABLE [dbo].[FedHeaderCampPerry]
    ADD DEFAULT (' ') FOR [Manufacturer];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedHeaderCampPerry]...';


GO
ALTER TABLE [dbo].[FedHeaderCampPerry]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedTransCampPerry]...';


GO
ALTER TABLE [dbo].[FedTransCampPerry]
    ADD DEFAULT ((0)) FOR [HeaderID];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedTransCampPerry]...';


GO
ALTER TABLE [dbo].[FedTransCampPerry]
    ADD DEFAULT ((0)) FOR [LineNum];


GO
PRINT N'Creating unnamed constraint on [dbo].[FedTransCampPerry]...';


GO
ALTER TABLE [dbo].[FedTransCampPerry]
    ADD DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [CODE];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [DESC];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [FLAG1];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [FLAG2];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [FLAG3];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [FLAG4];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [FLAG5];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [MANUFACT];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [MODEL];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [SEMIFULL];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [NAME];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [STREET];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [CITY];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [STATE];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT ((0)) FOR [NUM_SER_TO_ENT];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT ((0)) FOR [NUM_SER_NOT_ENT];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [PREFIX];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [SUFFIX];


GO
PRINT N'Creating unnamed constraint on [dbo].[GUNTYPES]...';


GO
ALTER TABLE [dbo].[GUNTYPES]
    ADD DEFAULT (' ') FOR [PRINTED];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [SPRNUM];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [DESC];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [ORIGAMNT];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RAW];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WIP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [FIN];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [ASSIGNED];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [REORDPNT];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [ONORD];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [FULL];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [YSHIP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [YA];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [YP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ('01/01/1753') FOR [LSALE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [COSTRAW];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [COSTWIP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [COSTFIN];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DEALER];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RETAIL];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [Z];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DEFRAW];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DEFWIP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DEFFIN];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [GUNTYPE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [GUNSTOCK];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ('01/01/1753') FOR [DELIVERY];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [NOTE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [SUB2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [SUB3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [FREIGHT];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [EXCISE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [CALIBER];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [COMPANY_#];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [DIVISION_#];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [ACCOUNT_ID];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [NSN_#];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [FS_#];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [VENDOR_INFO];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [DESC_2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RESERVED];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [INTERNAT_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [PRICE_EDIT];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [INSPECT_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [SCRAP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [COSTSCRAP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [PURCH_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [RECEIVE_TO];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [SCOMPANY_#];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [SDIVISION_#];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [SACCOUNT_ID];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [PR_SHT_DESC];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RAW_ASSIGNED];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [FREIGHT_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [BREAKDOWN_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [GROUP1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [RPT_GROUP];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [LOT_SIZE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [CUSTOM_COUNT];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [SERIAL_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_QTY1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_PRCNT1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_QTY2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_PRCNT2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_QTY3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_PRCNT3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_QTY4];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHLS_PRCNT4];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_QTY1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_PRCNT1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_QTY2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_PRCNT2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_QTY3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_PRCNT3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_QTY4];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [DLR_PRCNT4];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_QTY1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_PRCNT1];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_QTY2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_PRCNT2];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_QTY3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_PRCNT3];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_QTY4];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [RTL_PRCNT4];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WHOLESALE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [VENDOR_ID];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [FIREARM_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [TAX_FLAG];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [EXCISE_TYPE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [UOM_DESC];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [LEAD_TIME];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [INVAVGPRICE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [WOASSIGNED];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [OEASSIGNED];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [BARREL_LENGTH];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [FINISH];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [SELLABLE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [ACTIVE];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [DRAWING_NUMBER];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [REVISION_NUMBER];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [Part_Type];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [Part_Category];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [LawEnf_Price];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [Star_Price];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [BoxStore_Price];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [BuyGroup_Price];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [HASSERIAL];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [CreatedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ('01/01/1753') FOR [CreatedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [ChangedBy];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ('01/01/1753') FOR [ChangedDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT (' ') FOR [Version];


GO
PRINT N'Creating unnamed constraint on [dbo].[parts]...';


GO
ALTER TABLE [dbo].[parts]
    ADD DEFAULT ((0)) FOR [Packed];


GO
PRINT N'Creating [dbo].[DF_parts_PulledToWO]...';


GO
ALTER TABLE [dbo].[parts]
    ADD CONSTRAINT [DF_parts_PulledToWO] DEFAULT ((0)) FOR [PulledToWO];


GO
PRINT N'Creating unnamed constraint on [dbo].[SMSUPPLY]...';


GO
ALTER TABLE [dbo].[SMSUPPLY]
    ADD DEFAULT (' ') FOR [SUPPLIER];


GO
PRINT N'Creating unnamed constraint on [dbo].[SMSUPPLY]...';


GO
ALTER TABLE [dbo].[SMSUPPLY]
    ADD DEFAULT (' ') FOR [NAME];


GO
PRINT N'Creating unnamed constraint on [dbo].[SMSUPPLY]...';


GO
ALTER TABLE [dbo].[SMSUPPLY]
    ADD DEFAULT (' ') FOR [STREET];


GO
PRINT N'Creating unnamed constraint on [dbo].[SMSUPPLY]...';


GO
ALTER TABLE [dbo].[SMSUPPLY]
    ADD DEFAULT (' ') FOR [CITY];


GO
PRINT N'Creating unnamed constraint on [dbo].[SMSUPPLY]...';


GO
ALTER TABLE [dbo].[SMSUPPLY]
    ADD DEFAULT (' ') FOR [STATE];


GO
PRINT N'Creating unnamed constraint on [dbo].[SMSUPPLY]...';


GO
ALTER TABLE [dbo].[SMSUPPLY]
    ADD DEFAULT (' ') FOR [FFLNUM];


GO
PRINT N'Creating [dbo].[FK_CodeMast_TYPE]...';


GO
ALTER TABLE [dbo].[CodeMast]
    ADD CONSTRAINT [FK_CodeMast_TYPE] FOREIGN KEY ([TYPE]) REFERENCES [dbo].[CodeType] ([TYPE]);


GO
PRINT N'Creating [dbo].[FindMyData_String]...';


GO
CREATE PROCEDURE [dbo].[FindMyData_String]
    @DataToFind NVARCHAR(4000),
    @ExactMatch BIT = 0
AS
SET NOCOUNT ON

DECLARE @Temp TABLE(RowId INT IDENTITY(1,1), SchemaName sysname, TableName sysname, ColumnName SysName, DataType VARCHAR(100), DataFound BIT)

    INSERT  INTO @Temp(TableName,SchemaName, ColumnName, DataType)
    SELECT  C.TABLE_NAME,C.TABLE_SCHEMA, C.COLUMN_NAME, C.DATA_TYPE
    FROM    INFORMATION_SCHEMA.COLUMNS AS C
            INNER Join INFORMATION_SCHEMA.TABLES AS T
                ON C.TABLE_NAME = T.TABLE_NAME
        AND C.TABLE_SCHEMA = T.TABLE_SCHEMA
    WHERE   TABLE_TYPE = 'Base Table'
            And DATA_TYPE In ('ntext','text','nvarchar','nchar','varchar','char')


DECLARE @i INT
DECLARE @MAX INT
DECLARE @TableName sysname
DECLARE @ColumnName sysname
DECLARE @SchemaName sysname
DECLARE @SQL NVARCHAR(4000)
DECLARE @PARAMETERS NVARCHAR(4000)
DECLARE @DataExists BIT
DECLARE @SQLTemplate NVARCHAR(4000)

SELECT  @SQLTemplate = CASE WHEN @ExactMatch = 1
                            THEN 'If Exists(Select *
                                          From   ReplaceTableName
                                          Where  Convert(nVarChar(4000), [ReplaceColumnName])
                                                       = ''' + @DataToFind + '''
                                          )
                                     Set @DataExists = 1
                                 Else
                                     Set @DataExists = 0'
                            ELSE 'If Exists(Select *
                                          From   ReplaceTableName
                                          Where  Convert(nVarChar(4000), [ReplaceColumnName])
                                                       Like ''%' + @DataToFind + '%''
                                          )
                                     Set @DataExists = 1
                                 Else
                                     Set @DataExists = 0'
                            END,
        @PARAMETERS = '@DataExists Bit OUTPUT',
        @i = 1

SELECT @i = 1, @MAX = MAX(RowId)
FROM   @Temp

WHILE @i <= @MAX
    BEGIN
        SELECT  @SQL = REPLACE(REPLACE(@SQLTemplate, 'ReplaceTableName', QUOTENAME(SchemaName) + '.' + QUOTENAME(TableName)), 'ReplaceColumnName', ColumnName)
        FROM    @Temp
        WHERE   RowId = @i


        PRINT @SQL
        EXEC sys.sp_executesql @SQL, @PARAMETERS, @DataExists = @DataExists OUTPUT

        IF @DataExists =1
            UPDATE @Temp SET DataFound = 1 WHERE RowId = @i

        SET @i = @i + 1
    END

SELECT  SchemaName,TableName, ColumnName
FROM    @Temp
WHERE   DataFound = 1
GO
PRINT N'Creating [dbo].[sp_Recover_Modified_Data_Proc]...';


GO

CREATE PROCEDURE sp_Recover_Modified_Data_Proc
@Database_Name NVARCHAR(MAX),
@SchemaName_n_TableName NVARCHAR(MAX),
@Date_From datetime='1900/01/01',
@Date_To datetime ='9999/12/31'
AS
DECLARE @parms nvarchar(1024)
DECLARE @Fileid INT
DECLARE @Pageid INT
DECLARE @Slotid INT
DECLARE @RowLogContents0 VARBINARY(8000)
DECLARE @RowLogContents1 VARBINARY(8000)
DECLARE @RowLogContents3 VARBINARY(8000)
DECLARE @RowLogContents3_Var VARCHAR(MAX)
 
DECLARE @RowLogContents4 VARBINARY(8000)
DECLARE @LogRecord VARBINARY(8000)
DECLARE @LogRecord_Var VARCHAR(MAX)
 
DECLARE @ConsolidatedPageID VARCHAR(MAX)
Declare @AllocUnitID as bigint
Declare @TransactionID as VARCHAR(MAX)
Declare @Operation as VARCHAR(MAX)
Declare @DatabaseCollation VARCHAR(MAX)
 
 
/*  Pick The actual data
*/
declare @temppagedata table
(
[ParentObject] sysname,
[Object] sysname,
[Field] sysname,
[Value] sysname)
 
declare @pagedata table
(
[Page ID] sysname,
[AllocUnitId] bigint,
[ParentObject] sysname,
[Object] sysname,
[Field] sysname,
[Value] sysname)
 
 
    DECLARE Page_Data_Cursor CURSOR FOR
    /*We need to filter LOP_MODIFY_ROW,LOP_MODIFY_COLUMNS from log for modified records & Get its Slot No, Page ID & AllocUnit ID*/
    SELECT [Page ID],[Slot ID],[AllocUnitId]
    FROM    sys.fn_dblog(NULL, NULL) 
    WHERE   
    AllocUnitId IN
    (Select [allocation_unit_id] from sys.allocation_units allocunits
    INNER JOIN sys.partitions partitions ON (allocunits.type IN (1, 3) 
    AND partitions.hobt_id = allocunits.container_id) OR (allocunits.type = 2
    AND partitions.partition_id = allocunits.container_id) 
    Where object_id=object_ID('' + @SchemaName_n_TableName + ''))
    AND Operation IN ('LOP_MODIFY_ROW','LOP_MODIFY_COLUMNS')  AND [Context] IN ('LCX_HEAP','LCX_CLUSTERED')
    /*Use this subquery to filter the date*/
 
    AND [Transaction ID] IN (SELECT DISTINCT [Transaction ID] FROM    sys.fn_dblog(NULL, NULL)
    WHERE Context IN ('LCX_NULL') AND Operation in ('LOP_BEGIN_XACT') 
    AND [Transaction Name]='UPDATE'
    AND  CONVERT(NVARCHAR(11),[Begin Time]) BETWEEN @Date_From AND @Date_To)
 
    /****************************************/
 
    GROUP BY [Page ID],[Slot ID],[AllocUnitId]
    ORDER BY [Slot ID]   
  
    OPEN Page_Data_Cursor
 
    FETCH NEXT FROM Page_Data_Cursor INTO @ConsolidatedPageID, @Slotid,@AllocUnitID
 
    WHILE @@FETCH_STATUS = 0
    BEGIN
        DECLARE @hex_pageid AS VARCHAR(Max)
        /*Page ID contains File Number and page number It looks like 0001:00000130.
          In this example 0001 is file Number &  00000130 is Page Number & These numbers are in Hex format*/
        SET @Fileid=SUBSTRING(@ConsolidatedPageID,0,CHARINDEX(':',@ConsolidatedPageID)) -- Seperate File ID from Page ID
        SET @hex_pageid ='0x'+ SUBSTRING(@ConsolidatedPageID,CHARINDEX(':',@ConsolidatedPageID)+1,Len(@ConsolidatedPageID))  ---Seperate the page ID
        
        SELECT @Pageid=Convert(INT,cast('' AS XML).value('xs:hexBinary(substring(sql:variable("@hex_pageid"),sql:column("t.pos")) )', 'varbinary(max)')) -- Convert Page ID from hex to integer
        FROM (SELECT CASE substring(@hex_pageid, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)
                     
        DELETE @temppagedata
        -- Now we need to get the actual data (After modification) from the page
        INSERT INTO @temppagedata EXEC( 'DBCC PAGE(' + @Database_Name + ', ' + @fileid + ', ' + @pageid + ', 3) with tableresults,no_infomsgs;');
        -- Add Page Number and allocUnit ID in data to identity which one page it belongs to.                   
        INSERT INTO @pagedata SELECT @ConsolidatedPageID,@AllocUnitID,[ParentObject],[Object],[Field] ,[Value] FROM @temppagedata
 
        FETCH NEXT FROM Page_Data_Cursor INTO  @ConsolidatedPageID, @Slotid,@AllocUnitID
    END
 
CLOSE Page_Data_Cursor
DEALLOCATE Page_Data_Cursor
 
DECLARE @Newhexstring VARCHAR(MAX);
 
 
DECLARE @ModifiedRawData TABLE
(
  [ID] INT IDENTITY(1,1),
  [PAGE ID] VARCHAR(MAX),
  [Slot ID] INT,
  [AllocUnitId] BIGINT,
  [RowLog Contents 0_var] VARCHAR(MAX),
  [RowLog Contents 0] VARBINARY(8000)
)
--The modified data is in multiple rows in the page, so we need to convert it into one row as a single hex value.
--This hex value is in string format
INSERT INTO @ModifiedRawData ([PAGE ID],[Slot ID],[AllocUnitId]
,[RowLog Contents 0_var])
SELECT B.[Page ID],A.[Slot ID],A.[AllocUnitId]
,(
SELECT REPLACE(STUFF((SELECT REPLACE(SUBSTRING([Value],CHARINDEX(':',[Value])+1,48),'†','')
FROM @pagedata C  WHERE B.[Page ID]= C.[Page ID] And A.[Slot ID] =LTRIM(RTRIM(SUBSTRING(C.[ParentObject],5,3))) And [Object] Like '%Memory Dump%'
Group By [Value] FOR XML PATH('') ),1,1,'') ,' ','')
) AS [Value]
 
FROM sys.fn_dblog(NULL, NULL) A
INNER JOIN @pagedata B On A.[Page ID]=B.[Page ID]
AND A.[AllocUnitId]=B.[AllocUnitId]
AND A.[Slot ID] =LTRIM(RTRIM(Substring(B.[ParentObject],5,3)))
AND B.[Object] Like '%Memory Dump%'
WHERE A.AllocUnitId IN
(Select [allocation_unit_id] from sys.allocation_units allocunits
INNER JOIN sys.partitions partitions ON (allocunits.type IN (1, 3)
AND partitions.hobt_id = allocunits.container_id) OR (allocunits.type = 2
AND partitions.partition_id = allocunits.container_id) 
Where object_id=object_ID('' + @SchemaName_n_TableName + ''))
AND Operation in ('LOP_MODIFY_ROW','LOP_MODIFY_COLUMNS') AND [Context] IN ('LCX_HEAP','LCX_CLUSTERED')
/*Use this subquery to filter the date*/
 
AND [Transaction ID] IN (Select DISTINCT [Transaction ID] FROM sys.fn_dblog(NULL, NULL)
Where Context IN ('LCX_NULL') AND Operation IN ('LOP_BEGIN_XACT') 
AND [Transaction Name]='UPDATE'
AND  CONVERT(NVARCHAR(11),[Begin Time]) BETWEEN @Date_From AND @Date_To)
 
/****************************************/
GROUP BY B.[Page ID],A.[Slot ID],A.[AllocUnitId]--,[Transaction ID]
ORDER BY [Slot ID]
 
 
-- Convert the hex value data in string, convert it into Hex value as well.
UPDATE @ModifiedRawData  SET [RowLog Contents 0] = cast('' AS XML).value('xs:hexBinary(substring(sql:column("[RowLog Contents 0_var]"), 0) )', 'varbinary(max)')
FROM @ModifiedRawData
 
---Now we have modifed data plus its slot ID , page ID and allocunit as well.
--After that we need to get the old values before modfication, these datas are in chunks.
DECLARE Page_Data_Cursor CURSOR FOR
 
Select [Page ID],[Slot ID],[AllocUnitId],[Transaction ID],[RowLog Contents 0], [RowLog Contents 1],[RowLog Contents 3],[RowLog Contents 4]
,Substring ([Log Record],[Log Record Fixed Length],([Log Record Length]+1)-([Log Record Fixed Length])) as [Log Record]
,Operation
FROM    sys.fn_dblog(NULL, NULL) 
WHERE   AllocUnitId IN
(Select [allocation_unit_id] from sys.allocation_units allocunits
INNER JOIN sys.partitions partitions ON (allocunits.type IN (1, 3) 
AND partitions.hobt_id = allocunits.container_id) OR (allocunits.type = 2
AND partitions.partition_id = allocunits.container_id) 
Where object_id=object_ID('' + @SchemaName_n_TableName + ''))
AND Operation in ('LOP_MODIFY_ROW','LOP_MODIFY_COLUMNS') And [Context] IN ('LCX_HEAP','LCX_CLUSTERED')
/*Use this sub query to filter the date*/
 
AND [Transaction ID] IN (Select DISTINCT [Transaction ID] FROM    sys.fn_dblog(NULL, NULL)
WHERE Context IN ('LCX_NULL') AND Operation IN ('LOP_BEGIN_XACT') 
AND [Transaction Name]='UPDATE'
AND  CONVERT(NVARCHAR(11),[Begin Time]) BETWEEN @Date_From AND @Date_To)
 
/****************************************/
Order By [Slot ID],[Transaction ID] DESC
 
OPEN Page_Data_Cursor
 
    FETCH NEXT FROM Page_Data_Cursor INTO @ConsolidatedPageID, @Slotid,@AllocUnitID,@TransactionID,@RowLogContents0,@RowLogContents1,@RowLogContents3,@RowLogContents4,@LogRecord,@Operation
    WHILE @@FETCH_STATUS = 0
    BEGIN
           IF @Operation ='LOP_MODIFY_ROW' 
              BEGIN
                      /* If it is @Operation Type is 'LOP_MODIFY_ROW' then it is very simple to recover the modified data. The old data is in [RowLog Contents 0] Field and modified data is in [RowLog Contents 1] Field. Simply replace it with the modified data and get the old data.
                      */
                      INSERT INTO @ModifiedRawData ([PAGE ID],[Slot ID],[AllocUnitId],[RowLog Contents 0_var])
                      SELECT TOP 1  @ConsolidatedPageID AS [PAGE ID],@Slotid AS [Slot ID],@AllocUnitID AS [AllocUnitId]
                      ,REPLACE (UPPER([RowLog Contents 0_var]),UPPER(CAST('' AS XML).value('xs:hexBinary(sql:variable("@RowLogContents1") )', 'varchar(max)')),UPPER(cast('' AS XML).value('xs:hexBinary(sql:variable("@RowLogContents0") )', 'varchar(max)'))) AS [RowLog Contents 0_var]
                      FROM  @ModifiedRawData WHERE [PAGE ID]=@ConsolidatedPageID And [Slot ID]=@Slotid And [AllocUnitId]=@AllocUnitID ORDER BY [ID] DESC
 
                      --- Convert the old data which is in string format to hex format.
                      UPDATE @ModifiedRawData  SET [RowLog Contents 0] = cast('' AS XML).value('xs:hexBinary(substring(sql:column("[RowLog Contents 0_var]"), 0) )', 'varbinary(max)')
                      FROM @ModifiedRawData Where [Slot ID]=@SlotID
 
              END
         IF @Operation ='LOP_MODIFY_COLUMNS'                   
             BEGIN
 
                          /* If it is @Operation Type is 'LOP_MODIFY_ROW' then we need to follow a different procedure to recover modified
                             .Because this time the data is also in chunks but merge with the data log.
                          */
                            --First, we need to get the [RowLog Contents 3] Because in [Log Record] field the modified data is available after the [RowLog Contents 3] data.
                            SET @RowLogContents3_Var=cast('' AS XML).value('xs:hexBinary(sql:variable("@RowLogContents3") )', 'varchar(max)')
                            SET @LogRecord_Var =cast('' AS XML).value('xs:hexBinary(sql:variable("@LogRecord"))', 'varchar(max)')
            
                            DECLARE @RowLogData_Var VARCHAR(Max)
                            DECLARE @RowLogData_Hex VARBINARY(Max)
                            ---First get the modifed data chunks in string format
                            SET @RowLogData_Var = SUBSTRING(@LogRecord_Var, CHARINDEX(@RowLogContents3_Var,@LogRecord_Var) +LEN(@RowLogContents3_Var) ,LEN(@LogRecord_Var))
                            --Then convert it into the hex values.
                            SELECT @RowLogData_Hex=CAST('' AS XML).value('xs:hexBinary( substring(sql:variable("@RowLogData_Var"),0) )', 'varbinary(max)')
                            FROM (SELECT CASE SUBSTRING(@RowLogData_Var, 1, 2) WHEN '0x' THEN 3 ELSE 0 END) AS t(pos)
                            DECLARE @TotalFixedLengthData INT 
                            DECLARE @FixedLength_Offset INT
                            DECLARE @VariableLength_Offset INT
                            DECLARE @VariableLength_Offset_Start INT
                            DECLARE @VariableLengthIncrease INT
                            DECLARE @FixedLengthIncrease INT
                            DECLARE @OldFixedLengthStartPosition INT
                            DECLARE @FixedLength_Loc INT
                            DECLARE @VariableLength_Loc INT
                            DECLARE @FixedOldValues VARBINARY(MAX)
                            DECLARE @FixedNewValues VARBINARY(MAX)
                            DECLARE @VariableOldValues VARBINARY(MAX)
                            DECLARE @VariableNewValues VARBINARY(MAX)
                         
                            -- Before recovering the modfied data we need to get the total fixed length data size and start position of the varaible data
                             
                            SELECT TOP 1 @TotalFixedLengthData=CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0] , 2 + 1, 2))))
                            ,@VariableLength_Offset_Start=CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0] , 2 + 1, 2))))+5+CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0] , CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0] , 2 + 1, 2)))) + 1, 2))))/8.0))
                            FROM @ModifiedRawData
                            ORDER BY [ID] DESC
 
                            SET @FixedLength_Offset= CONVERT(BINARY(2),REVERSE(CONVERT(BINARY(4),(@RowLogContents0))))--)
                            SET @VariableLength_Offset=CONVERT(int,CONVERT(BINARY(2),REVERSE(@RowLogContents0)))
                             
                            /* We already have modified data chunks in @RowLogData_Hex but this data is in merge format (modified plus actual data)
                              So , here we need [Row Log Contents 1] field , because in this field we have the data length both the modified and actual data
                               so this length will help us to break it into original and modified data chunks.
                            */
                            SET @FixedLength_Loc= CONVERT(INT,SUBSTRING(@RowLogContents1,1,1))
                            SET @VariableLength_Loc =CONVERT(INT,SUBSTRING(@RowLogContents1,3,1))
 
                            /*First , we need to break Fix length data actual with the help of data length  */
                            SET @OldFixedLengthStartPosition= CHARINDEX(@RowLogContents4,@RowLogData_Hex)
                            SET @FixedOldValues = SUBSTRING(@RowLogData_Hex,@OldFixedLengthStartPosition,@FixedLength_Loc)
                            SET @FixedLengthIncrease = (CASE WHEN (Len(@FixedOldValues)%4)=0 THEN 1 ELSE (4-(LEN(@FixedOldValues)%4))  END)
                            /*After that , we need to break Fix length data modified data with the help of data length  */
                            SET @FixedNewValues =SUBSTRING(@RowLogData_Hex,@OldFixedLengthStartPosition+@FixedLength_Loc+@FixedLengthIncrease,@FixedLength_Loc)
 
                            /*Same we need to break the variable data with the help of data length*/
                            SET @VariableOldValues =SUBSTRING(@RowLogData_Hex,@OldFixedLengthStartPosition+@FixedLength_Loc+@FixedLengthIncrease+@FixedLength_Loc+(@FixedLengthIncrease),@VariableLength_Loc)
                            SET @VariableLengthIncrease =  (CASE WHEN (LEN(@VariableOldValues)%4)=0 THEN 1 ELSE (4-(Len(@VariableOldValues)%4))+1  END)
                            SET @VariableOldValues =(Case When @VariableLength_Loc =1 Then  @VariableOldValues+0x00 else @VariableOldValues end)
                 
                            SET @VariableNewValues =SUBSTRING(SUBSTRING(@RowLogData_Hex,@OldFixedLengthStartPosition+@FixedLength_Loc+@FixedLengthIncrease+@FixedLength_Loc+(@FixedLengthIncrease-1)+@VariableLength_Loc+@VariableLengthIncrease,Len(@RowLogData_Hex)+1),1,Len(@RowLogData_Hex)+1) --LEN(@VariableOldValues)
                            
                            /*here we need to replace the fixed length &  variable length actaul data with modifed data
                            */
                             
                            Select top 1 @VariableNewValues=Case
                            When Charindex(Substring(@VariableNewValues,0,Len(@VariableNewValues)+1),[RowLog Contents 0])<>0 Then Substring(@VariableNewValues,0,Len(@VariableNewValues)+1)
                            When Charindex(Substring(@VariableNewValues,0,Len(@VariableNewValues)),[RowLog Contents 0])<>0 Then  Substring(@VariableNewValues,0,Len(@VariableNewValues))
                            When Charindex(Substring(@VariableNewValues,0,Len(@VariableNewValues)-1),[RowLog Contents 0])<>0 Then Substring(@VariableNewValues,0,Len(@VariableNewValues)-1)--3 --Substring(@VariableNewValues,0,Len(@VariableNewValues)-1)
                            When Charindex(Substring(@VariableNewValues,0,Len(@VariableNewValues)-2),[RowLog Contents 0])<>0 Then Substring(@VariableNewValues,0,Len(@VariableNewValues)-2)
                            When Charindex(Substring(@VariableNewValues,0,Len(@VariableNewValues)-3),[RowLog Contents 0])<>0 Then Substring(@VariableNewValues,0,Len(@VariableNewValues)-3) --5--Substring(@VariableNewValues,0,Len(@VariableNewValues)-3)
                            End
                            FROM @ModifiedRawData  Where [Slot ID]=@SlotID  ORDER BY [ID] DESC
                                          
                            INSERT INTO @ModifiedRawData ([PAGE ID],[Slot ID],[AllocUnitId],[RowLog Contents 0_var],[RowLog Contents 0])
                            SELECT TOP 1  @ConsolidatedPageID AS [PAGE ID],@Slotid AS [Slot ID],@AllocUnitID AS [AllocUnitId],NULL
                            ,CAST(REPLACE(SUBSTRING([RowLog Contents 0],0,@TotalFixedLengthData+1),@FixedNewValues, @FixedOldValues) AS VARBINARY(max))
                            + SUBSTRING([RowLog Contents 0], @TotalFixedLengthData + 1, 2)
                            + SUBSTRING([RowLog Contents 0], @TotalFixedLengthData + 3, CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], @TotalFixedLengthData + 1, 2))))/8.0)))
                            + SUBSTRING([RowLog Contents 0], @TotalFixedLengthData + 3 + CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], @TotalFixedLengthData + 1, 2))))/8.0)), 2)
                            + Substring([RowLog Contents 0],@VariableLength_Offset_Start,(@VariableLength_Offset-(@VariableLength_Offset_Start-1)))
                            + CAST(REPLACE(SUBSTRING([RowLog Contents 0],@VariableLength_Offset+1,Len(@VariableNewValues))
                            , @VariableNewValues
                            , @VariableOldValues) AS VARBINARY)
                            + Substring([RowLog Contents 0],@VariableLength_Offset+Len(@VariableNewValues)+1,LEN([RowLog Contents 0]))
                            FROM @ModifiedRawData  Where [Slot ID]=@SlotID  ORDER BY [ID] DESC
                            
             END
 
        FETCH NEXT FROM Page_Data_Cursor INTO   @ConsolidatedPageID, @Slotid,@AllocUnitID,@TransactionID,@RowLogContents0,@RowLogContents1,@RowLogContents3,@RowLogContents4,@LogRecord,@Operation
    END
 
CLOSE Page_Data_Cursor
DEALLOCATE Page_Data_Cursor
 
DECLARE @RowLogContents VARBINARY(8000)
Declare @AllocUnitName NVARCHAR(Max)
Declare @SQL NVARCHAR(Max)
 
DECLARE @bitTable TABLE
(
  [ID] INT,
  [Bitvalue] INT
)
----Create table to set the bit position of one byte.
 
INSERT INTO @bitTable
SELECT 0,2 UNION ALL
SELECT 1,2 UNION ALL
SELECT 2,4 UNION ALL
SELECT 3,8 UNION ALL
SELECT 4,16 UNION ALL
SELECT 5,32 UNION ALL
SELECT 6,64 UNION ALL
SELECT 7,128
 
--Create table to collect the row data.
DECLARE @DeletedRecords TABLE
(
    [ID] INT IDENTITY(1,1),
    [RowLogContents]    VARBINARY(8000),
    [AllocUnitId]       BIGINT,
    [Transaction ID]    NVARCHAR(Max),
    [Slot ID]           INT,
    [FixedLengthData]   SMALLINT,
    [TotalNoOfCols]     SMALLINT,
    [NullBitMapLength]  SMALLINT,
    [NullBytes]         VARBINARY(8000),
    [TotalNoofVarCols]  SMALLINT,
    [ColumnOffsetArray] VARBINARY(8000),
    [VarColumnStart]    SMALLINT,
    [NullBitMap]        VARCHAR(MAX)
)
--Create a common table expression to get all the row data plus how many bytes we have for each row.
;WITH RowData AS (
SELECT
 
[RowLog Contents 0] AS [RowLogContents]
 
,@AllocUnitID AS [AllocUnitID]
 
,[ID] AS [Transaction ID] 
 
,[Slot ID] as [Slot ID]
--[Fixed Length Data] = Substring (RowLog content 0, Status Bit A+ Status Bit B + 1,2 bytes)
,CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) AS [FixedLengthData]  --@FixedLengthData
 
 --[TotalnoOfCols] =  Substring (RowLog content 0, [Fixed Length Data] + 1,2 bytes)
,CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2)))) as  [TotalNoOfCols]
 
--[NullBitMapLength]=ceiling([Total No of Columns] /8.0)
,CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0)) as [NullBitMapLength]
 
--[Null Bytes] = Substring (RowLog content 0, Status Bit A+ Status Bit B + [Fixed Length Data] +1, [NullBitMapLength] )
,SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 3,
CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0))) as [NullBytes]
 
--[TotalNoofVarCols] = Substring (RowLog content 0, Status Bit A+ Status Bit B + [Fixed Length Data] +1, [Null Bitmap length] + 2 )
,(CASE WHEN SUBSTRING([RowLog Contents 0], 1, 1) In (0x30,0x70) THEN
CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0],
CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 3
+ CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0)), 2))))  ELSE null  END) AS [TotalNoofVarCols]
 
--[ColumnOffsetArray]= Substring (RowLog content 0, Status Bit A+ Status Bit B + [Fixed Length Data] +1, [Null Bitmap length] + 2 , [TotalNoofVarCols]*2 )
,(CASE WHEN SUBSTRING([RowLog Contents 0], 1, 1) In (0x30,0x70) THEN
SUBSTRING([RowLog Contents 0]
, CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 3
+ CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0)) + 2
, (CASE WHEN SUBSTRING([RowLog Contents 0], 1, 1) In (0x30,0x70) THEN
CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0],
CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 3
+ CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0)), 2))))  ELSE null  END)
* 2)  ELSE null  END) AS [ColumnOffsetArray]
 
--  Variable column Start = Status Bit A+ Status Bit B + [Fixed Length Data] + [Null Bitmap length] + 2+([TotalNoofVarCols]*2)
,CASE WHEN SUBSTRING([RowLog Contents 0], 1, 1)In (0x30,0x70)
THEN  (
CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 4
 
+ CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0))
 
+ ((CASE WHEN SUBSTRING([RowLog Contents 0], 1, 1) In (0x30,0x70) THEN
CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0],
CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 3
+ CONVERT(INT, ceiling(CONVERT(INT, CONVERT(BINARY(2), REVERSE(SUBSTRING([RowLog Contents 0], CONVERT(SMALLINT, CONVERT(BINARY(2)
,REVERSE(SUBSTRING([RowLog Contents 0], 2 + 1, 2)))) + 1, 2))))/8.0)), 2))))  ELSE null  END) * 2))
 
ELSE null End AS [VarColumnStart]
From @ModifiedRawData
 
),
 
---Use this technique to repeate the row till the no of bytes of the row.
N1 (n) AS (SELECT 1 UNION ALL SELECT 1),
N2 (n) AS (SELECT 1 FROM N1 AS X, N1 AS Y),
N3 (n) AS (SELECT 1 FROM N2 AS X, N2 AS Y),
N4 (n) AS (SELECT ROW_NUMBER() OVER(ORDER BY X.n)
           FROM N3 AS X, N3 AS Y)
 
insert into @DeletedRecords
Select   RowLogContents
        ,[AllocUnitID]
        ,[Transaction ID]
        ,[Slot ID]
        ,[FixedLengthData]
        ,[TotalNoOfCols]
        ,[NullBitMapLength]
        ,[NullBytes]
        ,[TotalNoofVarCols]
        ,[ColumnOffsetArray]
        ,[VarColumnStart]
         --Get the Null value against each column (1 means null zero means not null)
        ,[NullBitMap]=(REPLACE(STUFF((SELECT ',' +
        (CASE WHEN [ID]=0 THEN CONVERT(NVARCHAR(1),(SUBSTRING(NullBytes, n, 1) % 2))  ELSE CONVERT(NVARCHAR(1),((SUBSTRING(NullBytes, n, 1) / [Bitvalue]) % 2)) END) --as [NullBitMap]
FROM
N4 AS Nums
Join RowData AS C ON n<=NullBitMapLength
Cross Join @bitTable WHERE C.[RowLogContents]=D.[RowLogContents] ORDER BY [RowLogContents],n ASC FOR XML PATH('')),1,1,''),',',''))
FROM RowData D
 
CREATE TABLE [#temp_Data]
(
   
    [FieldName]  VARCHAR(MAX) COLLATE database_default NOT NULL,
    [FieldValue] VARCHAR(MAX) COLLATE database_default NULL,
    [Rowlogcontents] VARBINARY(8000),
    [Transaction ID] VARCHAR(MAX) COLLATE database_default NOT NULL,
    [Slot ID] INT,
    [NonID] INT,
    --[System_type_id] int
 
)
---Create common table expression and join it with the rowdata table
--to get each column details
;With CTE AS (
/*This part is for variable data columns*/
SELECT
A.[ID],
RowLogContents,
[Transaction ID],
[Slot ID],
[name] ,
cols.leaf_null_bit AS nullbit,
leaf_offset,
ISNULL(syscolumns.length, cols.max_length) AS [length],
cols.system_type_id,
cols.leaf_bit_position AS bitpos,
ISNULL(syscolumns.xprec, cols.precision) AS xprec,
ISNULL(syscolumns.xscale, cols.scale) AS xscale,
SUBSTRING([NullBitMap], cols.leaf_null_bit, 1) AS is_null,
--Calculate the variable column size from the variable column offset array
(CASE WHEN leaf_offset<1 and SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=0 THEN
CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * leaf_offset*-1) - 1, 2)))) ELSE 0 END) AS [Column value Size],
 
---Calculate the column length
(CASE WHEN leaf_offset<1 and SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=0 THEN  CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * (leaf_offset*-1)) - 1, 2))))
- ISNULL(NULLIF(CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * ((leaf_offset*-1) - 1)) - 1, 2)))), 0), [VarColumnStart])
ELSE 0 END) AS [Column Length]
 
--Get the Hexa decimal value from the RowlogContent
--HexValue of the variable column=Substring([Column value Size] - [Column Length] + 1,[Column Length])
--This is the data of your column but in the Hexvalue
,CASE WHEN SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=1 THEN NULL ELSE
SUBSTRING(RowLogContents,((CASE WHEN leaf_offset<1 and SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=0 THEN CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * leaf_offset*-1) - 1, 2)))) ELSE 0 END)
- ((CASE WHEN leaf_offset<1 and SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=0 THEN  CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * (leaf_offset*-1)) - 1, 2))))
- ISNULL(NULLIF(CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * ((leaf_offset*-1) - 1)) - 1, 2)))), 0), [VarColumnStart])
ELSE 0 END))) + 1,((CASE WHEN leaf_offset<1 and SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=0 THEN  CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * (leaf_offset*-1)) - 1, 2))))
- ISNULL(NULLIF(CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (SUBSTRING ([ColumnOffsetArray], (2 * ((leaf_offset*-1) - 1)) - 1, 2)))), 0), [VarColumnStart])
ELSE 0 END))) END AS hex_Value
 
FROM @DeletedRecords A
Inner Join sys.allocation_units allocunits On A.[AllocUnitId]=allocunits.[allocation_unit_id]
INNER JOIN sys.partitions partitions ON (allocunits.type IN (1, 3)
AND partitions.hobt_id = allocunits.container_id) OR (allocunits.type = 2 AND partitions.partition_id = allocunits.container_id)
INNER JOIN sys.system_internals_partition_columns cols ON cols.partition_id = partitions.partition_id
LEFT OUTER JOIN syscolumns ON syscolumns.id = partitions.object_id AND syscolumns.colid = cols.partition_column_id
WHERE leaf_offset<0
 
UNION
/*This part is for fixed data columns*/
SELECT 
A.[ID],
RowLogContents,
[Transaction ID],
[Slot ID],
[name] ,
cols.leaf_null_bit AS nullbit,
leaf_offset,
ISNULL(syscolumns.length, cols.max_length) AS [length],
cols.system_type_id,
cols.leaf_bit_position AS bitpos,
ISNULL(syscolumns.xprec, cols.precision) AS xprec,
ISNULL(syscolumns.xscale, cols.scale) AS xscale,
SUBSTRING([NullBitMap], cols.leaf_null_bit, 1) AS is_null,
(SELECT TOP 1 ISNULL(SUM(CASE WHEN C.leaf_offset >1 THEN max_length ELSE 0 END),0) FROM
sys.system_internals_partition_columns C WHERE cols.partition_id =C.partition_id And C.leaf_null_bit<cols.leaf_null_bit)+5 AS [Column value Size],
syscolumns.length AS [Column Length]
 
,CASE WHEN SUBSTRING([NullBitMap], cols.leaf_null_bit, 1)=1 THEN NULL ELSE
SUBSTRING
(
RowLogContents,(SELECT TOP 1 ISNULL(SUM(CASE WHEN C.leaf_offset >1 THEN max_length ELSE 0 END),0) FROM
sys.system_internals_partition_columns C where cols.partition_id =C.partition_id And C.leaf_null_bit<cols.leaf_null_bit)+5
,syscolumns.length) END AS hex_Value
FROM @DeletedRecords A
Inner Join sys.allocation_units allocunits ON A.[AllocUnitId]=allocunits.[allocation_unit_id]
INNER JOIN sys.partitions partitions ON (allocunits.type IN (1, 3)
 AND partitions.hobt_id = allocunits.container_id) OR (allocunits.type = 2 AND partitions.partition_id = allocunits.container_id)
INNER JOIN sys.system_internals_partition_columns cols ON cols.partition_id = partitions.partition_id
LEFT OUTER JOIN syscolumns ON syscolumns.id = partitions.object_id AND syscolumns.colid = cols.partition_column_id
WHERE leaf_offset>0 )
 
--Converting data from Hexvalue to its orgional datatype.
--Implemented datatype conversion mechanism for each datatype
--Select * from sys.columns Where [object_id]=object_id('' + @SchemaName_n_TableName + '')
--Select * from CTE
 
INSERT INTO #temp_Data
SELECT
name,
CASE
 WHEN system_type_id IN (231, 239) THEN  LTRIM(RTRIM(CONVERT(NVARCHAR(max),hex_Value)))  --NVARCHAR ,NCHAR
 WHEN system_type_id IN (167,175) THEN  LTRIM(RTRIM(CONVERT(VARCHAR(max),REPLACE(hex_Value, 0x00, 0x20))))  --VARCHAR,CHAR
 WHEN system_type_id = 48 THEN CONVERT(VARCHAR(MAX), CONVERT(TINYINT, CONVERT(BINARY(1), REVERSE (hex_Value)))) --TINY INTEGER
 WHEN system_type_id = 52 THEN CONVERT(VARCHAR(MAX), CONVERT(SMALLINT, CONVERT(BINARY(2), REVERSE (hex_Value)))) --SMALL INTEGER
 WHEN system_type_id = 56 THEN CONVERT(VARCHAR(MAX), CONVERT(INT, CONVERT(BINARY(4), REVERSE(hex_Value)))) -- INTEGER
 WHEN system_type_id = 127 THEN CONVERT(VARCHAR(MAX), CONVERT(BIGINT, CONVERT(BINARY(8), REVERSE(hex_Value))))-- BIG INTEGER
 WHEN system_type_id = 61 Then CONVERT(VARCHAR(MAX),CONVERT(DATETIME,CONVERT(VARBINARY(8000),REVERSE (hex_Value))),100) --DATETIME
 --WHEN system_type_id IN( 40) Then CONVERT(VARCHAR(MAX),CONVERT(DATE,CONVERT(VARBINARY(8000),(hex_Value))),100) --DATE This datatype only works for SQL Server 2008
 WHEN system_type_id =58 Then CONVERT(VARCHAR(MAX),CONVERT(SMALLDATETIME,CONVERT(VARBINARY(8000),REVERSE(hex_Value))),100) --SMALL DATETIME
 WHEN system_type_id = 108 THEN CONVERT(VARCHAR(MAX), CAST(CONVERT(NUMERIC(38,30), CONVERT(VARBINARY,CONVERT(VARBINARY,xprec)+CONVERT(VARBINARY,xscale))+CONVERT(VARBINARY(1),0) + hex_Value) as FLOAT)) --- NUMERIC
 WHEN system_type_id In(60,122) THEN CONVERT(VARCHAR(MAX),Convert(MONEY,Convert(VARBINARY(8000),Reverse(hex_Value))),2) --MONEY,SMALLMONEY
 WHEN system_type_id =106 THEN CONVERT(VARCHAR(MAX), CAST(CONVERT(Decimal(38,34), CONVERT(VARBINARY,Convert(VARBINARY,xprec)+CONVERT(VARBINARY,xscale))+CONVERT(VARBINARY(1),0) + hex_Value) as FLOAT)) --- DECIMAL
 WHEN system_type_id = 104 THEN CONVERT(VARCHAR(MAX),CONVERT (BIT,CONVERT(BINARY(1), hex_Value)%2))  -- BIT
 WHEN system_type_id =62 THEN  RTRIM(LTRIM(STR(CONVERT(FLOAT,SIGN(CAST(CONVERT(VARBINARY(8000),Reverse(hex_Value)) AS BIGINT)) * (1.0 + (CAST(CONVERT(VARBINARY(8000),Reverse(hex_Value)) AS BIGINT) & 0x000FFFFFFFFFFFFF) * POWER(CAST(2 AS FLOAT), -52)) * POWER(CAST(2 AS FLOAT),((CAST(CONVERT(VARBINARY(8000),Reverse(hex_Value)) AS BIGINT) & 0x7ff0000000000000) / EXP(52 * LOG(2))-1023))),53,LEN(hex_Value)))) --- FLOAT
 When system_type_id =59 THEN  Left(LTRIM(STR(CAST(SIGN(CAST(Convert(VARBINARY(8000),REVERSE(hex_Value)) AS BIGINT))* (1.0 + (CAST(CONVERT(VARBINARY(8000),Reverse(hex_Value)) AS BIGINT) & 0x007FFFFF) * POWER(CAST(2 AS Real), -23)) * POWER(CAST(2 AS Real),(((CAST(CONVERT(VARBINARY(8000),Reverse(hex_Value)) AS INT) )& 0x7f800000)/ EXP(23 * LOG(2))-127))AS REAL),23,23)),8) --Real
 WHEN system_type_id In (165,173) THEN (CASE WHEN CHARINDEX(0x,cast('' AS XML).value('xs:hexBinary(sql:column("hex_Value"))', 'VARBINARY(8000)')) = 0 THEN '0x' ELSE '' END) +cast('' AS XML).value('xs:hexBinary(sql:column("hex_Value"))', 'varchar(max)') -- BINARY,VARBINARY
 WHEN system_type_id =36 THEN CONVERT(VARCHAR(MAX),CONVERT(UNIQUEIDENTIFIER,hex_Value)) --UNIQUEIDENTIFIER
 END AS FieldValue
,[RowLogContents]
,[Transaction ID]
,[Slot ID]
,[ID]
FROM CTE ORDER BY nullbit
 
/*Create Update statement*/
/*Now we have the modified and actual data as well*/
/*We need to create the update statement in case of recovery*/
 
;With CTE AS (SELECT
(CASE
WHEN system_type_id In (167,175,189) THEN QUOTENAME([name]) + '=' + ISNULL(+ '''' + [A].[FieldValue]+ '''','NULL')+ ' ,'+' '
WHEN system_type_id In (231,239) THEN  QUOTENAME([name]) + '='  + ISNULL(+ 'N''' +[A].[FieldValue]+ '''','NULL')+ ' ,'+''
WHEN system_type_id In (58,40,61,36) THEN QUOTENAME([name]) + '='  + ISNULL(+  ''''+[A].[FieldValue]+ '''','NULL') + '  ,'+' '
WHEN system_type_id In (48,52,56,59,60,62,104,106,108,122,127) THEN QUOTENAME([name]) + '='  + ISNULL([A].[FieldValue],'NULL')+ ' ,'+' '
END) as [Field]
,A.[Slot ID]
,A.[Transaction ID] as [Transaction ID]
,'D' AS [Type]
,[A].Rowlogcontents
,[A].[NonID]
FROM #temp_Data AS [A]
INNER JOIN #temp_Data AS [B] ON [A].[FieldName]=[B].[FieldName]
AND [A].[Slot ID]=[B].[Slot ID]
--And [A].[Transaction ID]=[B].[Transaction ID]+1
AND [B].[Transaction ID]=  (SELECT Min(Cast([Transaction ID] as int)) as [Transaction ID]  FROM #temp_Data AS [C]
WHERE [A].[Slot ID]=[C].[Slot ID]
GROUP BY [Slot ID])
INNER JOIN sys.columns [D] On  [object_id]=object_id('' + @SchemaName_n_TableName + '')
AND A.[FieldName] = D.[name]
WHERE ISNULL([A].[FieldValue],'')<>ISNULL([B].[FieldValue],'')
UNION ALL
 
SELECT(CASE
WHEN system_type_id In (167,175,189) THEN QUOTENAME([name]) + '=' + ISNULL(+ '''' + [A].[FieldValue]+ '''','NULL')+ ' AND '+''
WHEN system_type_id In (231,239) THEN  QUOTENAME([name]) + '='+ ISNULL(+ 'N''' +[A].[FieldValue]+ '''','NULL')+ ' AND '+''
WHEN system_type_id In (58,40,61,36) THEN QUOTENAME([name]) + '=' + ISNULL(+  ''''+[A].[FieldValue]+ '''','NULL') + ' AND '+''
WHEN system_type_id In (48,52,56,59,60,62,104,106,108,122,127) THEN QUOTENAME([name]) + '='  + ISNULL([A].[FieldValue],'NULL') + ' AND '+''
END) AS [Field]
,A.[Slot ID]
,A.[Transaction ID] AS [Transaction ID]
,'S' AS [Type]
,[A].Rowlogcontents
,[A].[NonID]
FROM #temp_Data AS [A]
INNER JOIN #temp_Data AS [B] ON [A].[FieldName]=[B].[FieldName]
AND [A].[Slot ID]=[B].[Slot ID]
--And [A].[Transaction ID]=[B].[Transaction ID]+1
AND [B].[Transaction ID]=  (SELECT Min(Cast([Transaction ID] as int)) as [Transaction ID] FROM #temp_Data AS [C]
WHERE [A].[Slot ID]=[C].[Slot ID]
GROUP BY [Slot ID])
INNER JOIN sys.columns [D] ON  [object_id]=object_id('' + @SchemaName_n_TableName + '')
AND [A].[FieldName]=D.[name]
WHERE ISNULL([A].[FieldValue],'')=ISNULL([B].[FieldValue],'')
AND A.[Transaction ID] NOT IN (SELECT Min(Cast([Transaction ID] as int)) as [Transaction ID] FROM #temp_Data AS [C]
WHERE [A].[Slot ID]=[C].[Slot ID]
GROUP BY [Slot ID])
)
 
,CTEUpdateQuery AS (SELECT 'UPDATE ' +  @SchemaName_n_TableName +  ' SET ' + LEFT(
STUFF((SELECT ' ' + ISNULL([Field],'')+ ' ' FROM CTE B
WHERE A.[Slot ID]=B.[Slot ID] AND A.[Transaction ID]=B.[Transaction ID] And B.[Type]='D' FOR XML PATH('') ),1,1,''),
 
LEN(STUFF((SELECT ' ' +ISNULL([Field],'')+ ' ' FROM CTE B
WHERE A.[Slot ID]=B.[Slot ID] AND A.[Transaction ID]=B.[Transaction ID] And B.[Type]='D' FOR XML PATH('') ),1,1,'') )-2)
 
+ '  WHERE  ' +
 
LEFT(STUFF((SELECT ' ' +ISNULL([Field],'')+ ' ' FROM CTE C
WHERE A.[Slot ID]=C.[Slot ID] AND A.[Transaction ID]=C.[Transaction ID] And C.[Type]='S' FOR XML PATH('') ),1,1,'') ,
 
LEN(STUFF((SELECT ' ' +ISNULL([Field],'')+ ' ' FROM CTE C
WHERE A.[Slot ID]=C.[Slot ID] AND A.[Transaction ID]=C.[Transaction ID] And C.[Type]='S' FOR XML PATH('') ),1,1,''))-4)
AS [Update Statement],
[Slot ID]
,[Transaction ID]
,Rowlogcontents
,[A].[NonID]
FROM CTE A
GROUP BY [Slot ID]
,[Transaction ID]
,Rowlogcontents
,[A].[NonID] )
 
INSERT INTO #temp_Data
SELECT 'Update Statement',ISNULL([Update Statement],''),[Rowlogcontents],[Transaction ID],[Slot ID],[NonID] FROM CTEUpdateQuery
 
/**************************/
--Create the column name in the same order to do pivot table.
DECLARE @FieldName VARCHAR(max)
SET @FieldName = STUFF(
(
SELECT ',' + CAST(QUOTENAME([name]) AS VARCHAR(MAX)) FROM syscolumns WHERE id=object_id('' + @SchemaName_n_TableName + '')
 
FOR XML PATH('')
), 1, 1, '')
 
--Finally did pivot table and got the data back in the same format.
--The [Update Statement] column will give you the query that you can execute in case of recovery.
SET @sql = 'SELECT ' + @FieldName  + ',[Update Statement] FROM #temp_Data
PIVOT (Min([FieldValue]) FOR FieldName IN (' + @FieldName  + ',[Update Statement])) AS pvt
Where [Transaction ID] NOT In (Select Min(Cast([Transaction ID] as int)) as [Transaction ID] from #temp_Data
Group By [Slot ID]) ORDER BY Convert(int,[Slot ID]),Convert(int,[Transaction ID])'
Print @sql
EXEC sp_executesql @sql
GO
/*
Post-Deployment Script Template
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.
 Use SQLCMD syntax to include a file in the post-deployment script.
 Example:      :r .\myfile.sql
 Use SQLCMD syntax to reference a variable in the post-deployment script.
 Example:      :setvar TableName MyTable
               SELECT * FROM [$(TableName)]
--------------------------------------------------------------------------------------
*/

USE [master]
GO

USE [$(DatabaseName)]
GO

/*  Populate dbo.CodeType table   */

IF NOT EXISTS( SELECT 1 FROM dbo.CodeType )
BEGIN
	SET IDENTITY_INSERT dbo.CodeType ON ;
    INSERT INTO
        dbo.CodeType( 
			Recnum
		  , TYPE
		  , DESCRIPTION
		  , COMMENT )
	SELECT
		Recnum
	  , TYPE
	  , DESCRIPTION
	  , COMMENT
    FROM
        [$(SpringfieldProd)].dbo.CodeType ;
	SET IDENTITY_INSERT dbo.CodeType OFF ;
END


IF NOT EXISTS( SELECT 1 FROM dbo.CodeMast )
BEGIN
	SET IDENTITY_INSERT dbo.CodeMast ON ;
    INSERT INTO
        dbo.CodeMast( 
			Recnum
		  , TYPE
		  , CODE
		  , DESCRIPTION )
	SELECT 
		Recnum
	  , TYPE
	  , CODE
	  , DESCRIPTION
	FROM
		[$(SpringfieldProd)].dbo.CodeMast ;
	SET IDENTITY_INSERT dbo.CodeMast OFF ;
END


IF NOT EXISTS( SELECT 1 FROM dbo.FedHeaderCampPerry )
BEGIN
	SET IDENTITY_INSERT dbo.FedHeaderCampPerry ON ;
    INSERT INTO
        dbo.FedHeaderCampPerry( 
			ID                  
		  , Serial              
		  , GunType             
		  , Manufacturer        
		  , SPRNum              
		  , Model               
		  , ModelDescription    
		  , Caliber             
		  , SemiOrFullAuto      
		  , BoltNum             
		  , Headspace           
		  , Importer            
		  , FirstReceivedDate   
		  , Location            
		  , ExciseTaxPaidDate   
		  , ExciseTaxPaidAmount 
		  , CurrentState        
		  , LastLineNum         
		  , CreatedBy           
		  , CreatedDate )         
	SELECT 
		ID                  
	  , Serial              
	  , GunType             
	  , Manufacturer        
	  , SPRNum              
	  , Model               
	  , ModelDescription    
	  , Caliber             
	  , SemiOrFullAuto      
	  , BoltNum             
	  , Headspace           
	  , Importer            
	  , FirstReceivedDate   
	  , Location            
	  , ExciseTaxPaidDate   
	  , ExciseTaxPaidAmount 
	  , CurrentState        
	  , LastLineNum         
	  , CreatedBy           
	  , CreatedDate 
	FROM
		[$(SpringfieldProd)].dbo.FedHeaderCampPerry ;
	SET IDENTITY_INSERT dbo.FedHeaderCampPerry OFF ;
END


IF NOT EXISTS( SELECT 1 FROM dbo.FedTransCampPerry )
BEGIN
	SET IDENTITY_INSERT dbo.FedTransCampPerry ON ;
    INSERT INTO
        dbo.FedTransCampPerry( 
			ID              
		  , HeaderID        
		  , LineNum         
		  , TransactionDate 
		  , TransactionType 
		  , Name            
		  , Street1         
		  , Street2         
		  , City            
		  , State           
		  , Country         
		  , FFLNumber       
		  , ChangeType      
		  , Description     
		  , RMA             
		  , ReceivingTicket 
		  , WorkOrderNumber 
		  , WorkOrderLine   
		  , OrdNum          
		  , OrderLineNum    
		  , PreviousValue   
		  , NewValue        
		  , CorrectionFor   
		  , CorrectedBy     
		  , Form4473        
		  , Location        
		  , DefectTagNumber 
		  , CreatedBy       
		  , CreatedDate )   
	SELECT 
		ID              
	  , HeaderID        
	  , LineNum         
	  , TransactionDate 
	  , TransactionType 
	  , Name            
	  , Street1         
	  , Street2         
	  , City            
	  , State           
	  , Country         
	  , FFLNumber       
	  , ChangeType      
	  , Description     
	  , RMA             
	  , ReceivingTicket 
	  , WorkOrderNumber 
	  , WorkOrderLine   
	  , OrdNum          
	  , OrderLineNum    
	  , PreviousValue   
	  , NewValue        
	  , CorrectionFor   
	  , CorrectedBy     
	  , Form4473        
	  , Location        
	  , DefectTagNumber 
	  , CreatedBy       
	  , CreatedDate
	FROM
		[$(SpringfieldProd)].dbo.FedTransCampPerry ;
	SET IDENTITY_INSERT dbo.FedTransCampPerry OFF ;
END


IF NOT EXISTS( SELECT 1 FROM dbo.GUNTYPES )
BEGIN
	SET IDENTITY_INSERT dbo.GUNTYPES ON ;
    INSERT INTO
        dbo.GUNTYPES( 
			Recnum          
		  , CODE            
		  , [DESC]            
		  , FLAG1           
		  , FLAG2           
		  , FLAG3           
		  , FLAG4           
		  , FLAG5           
		  , MANUFACT        
		  , MODEL           
		  , SEMIFULL        
		  , NAME            
		  , STREET          
		  , CITY            
		  , STATE           
		  , NUM_SER_TO_ENT  
		  , NUM_SER_NOT_ENT 
		  , PREFIX          
		  , SUFFIX          
		  , PRINTED )        
	SELECT 
		Recnum          
      , CODE            
      , [DESC]            
      , FLAG1           
      , FLAG2           
      , FLAG3           
      , FLAG4           
      , FLAG5           
      , MANUFACT        
      , MODEL           
      , SEMIFULL        
      , NAME            
      , STREET          
      , CITY            
      , STATE           
      , NUM_SER_TO_ENT  
      , NUM_SER_NOT_ENT 
      , PREFIX          
      , SUFFIX          
      , PRINTED         
	FROM
		[$(SpringfieldProd)].dbo.GUNTYPES ;
	SET IDENTITY_INSERT dbo.GUNTYPES OFF ;
END


IF NOT EXISTS( SELECT 1 FROM dbo.parts )
BEGIN
	SET IDENTITY_INSERT dbo.parts ON ;
    INSERT INTO
        dbo.parts( 
			Recnum                   
		  , SPRNUM                   
		  , [DESC]                     
		  , ORIGAMNT                 
		  , RAW                      
		  , WIP                      
		  , FIN                      
		  , ASSIGNED                 
		  , REORDPNT                 
		  , ONORD                    
		  , [FULL]                     
		  , YSHIP                    
		  , YA                       
		  , YP                       
		  , LSALE                    
		  , COSTRAW                  
		  , COSTWIP                  
		  , COSTFIN                  
		  , DEALER                   
		  , RETAIL                   
		  , Z                        
		  , UPC                      
		  , DEFRAW                   
		  , DEFWIP                   
		  , DEFFIN                   
		  , GUNTYPE                  
		  , GUNSTOCK                 
		  , DELIVERY                 
		  , NOTE                     
		  , Overhead                 
		  , IndirectLabor            
		  , DirectLabor              
		  , MaterialCost             
		  , SubContractor            
		  , SUB2                     
		  , SUB3                     
		  , FREIGHT                  
		  , EXCISE                   
		  , CALIBER                  
		  , COMPANY_#                
		  , DIVISION_#               
		  , ACCOUNT_ID               
		  , NSN_#                    
		  , FS_#                     
		  , VENDOR_INFO              
		  , DESC_2                   
		  , RESERVED                 
		  , INTERNAT_FLAG            
		  , PRICE_EDIT               
		  , INSPECT_FLAG             
		  , SCRAP                    
		  , COSTSCRAP                
		  , PURCH_FLAG               
		  , RECEIVE_TO               
		  , SCOMPANY_#               
		  , SDIVISION_#              
		  , SACCOUNT_ID              
		  , PR_SHT_DESC              
		  , RAW_ASSIGNED             
		  , FREIGHT_FLAG             
		  , BREAKDOWN_FLAG           
		  , GROUP1                   
		  , RPT_GROUP                
		  , LOT_SIZE                 
		  , CUSTOM_COUNT             
		  , SERIAL_FLAG              
		  , WHLS_QTY1                
		  , WHLS_PRCNT1              
		  , WHLS_QTY2                
		  , WHLS_PRCNT2              
		  , WHLS_QTY3                
		  , WHLS_PRCNT3              
		  , WHLS_QTY4                
		  , WHLS_PRCNT4              
		  , DLR_QTY1                 
		  , DLR_PRCNT1               
		  , DLR_QTY2                 
		  , DLR_PRCNT2               
		  , DLR_QTY3                 
		  , DLR_PRCNT3               
		  , DLR_QTY4                 
		  , DLR_PRCNT4               
		  , RTL_QTY1                 
		  , RTL_PRCNT1               
		  , RTL_QTY2                 
		  , RTL_PRCNT2               
		  , RTL_QTY3                 
		  , RTL_PRCNT3               
		  , RTL_QTY4                 
		  , RTL_PRCNT4               
		  , WHOLESALE                
		  , VENDOR_ID                
		  , FIREARM_FLAG             
		  , TAX_FLAG                 
		  , EXCISE_TYPE              
		  , UOM_DESC                 
		  , LEAD_TIME                
		  , INVAVGPRICE              
		  , WOASSIGNED               
		  , OEASSIGNED               
		  , BARREL_LENGTH            
		  , FINISH                   
		  , SELLABLE                 
		  , ACTIVE                   
		  , DRAWING_NUMBER           
		  , REVISION_NUMBER          
		  , Sale_Notes               
		  , Tech_Notes               
		  , Part_Type                
		  , Part_Category            
		  , LawEnf_Price             
		  , Star_Price               
		  , BoxStore_Price           
		  , BuyGroup_Price           
		  , HASSERIAL                
		  , CreatedBy                
		  , CreatedDate              
		  , ChangedBy                
		  , ChangedDate              
		  , Version                  
		  , UpdateSysInven           
		  , Capacity                 
		  , Location                 
		  , Aisle                    
		  , Rack                     
		  , Tier                     
		  , Bin                      
		  , ExciseTaxTotalMatCost    
		  , ExciseTaxTotalMatTaxCost 
		  , ExciseTaxLaborCost       
		  , ExciseTaxRatio           
		  , ExciseTaxAdjustedTax     
		  , ExciseTaxLaborTaxCost    
		  , ThreadedBarrel           
		  , SubCategory              
		  , Packed                   
		  , PulledToWO )               
	SELECT 
		Recnum                   
      , SPRNUM                   
      , [DESC]                    
      , ORIGAMNT                 
      , RAW                      
      , WIP                      
      , FIN                      
      , ASSIGNED                 
      , REORDPNT                 
      , ONORD                    
      , [FULL]                     
      , YSHIP                    
      , YA                       
      , YP                       
      , LSALE                    
      , COSTRAW                  
      , COSTWIP                  
      , COSTFIN                  
      , DEALER                   
      , RETAIL                   
      , Z                        
      , UPC                      
      , DEFRAW                   
      , DEFWIP                   
      , DEFFIN                   
      , GUNTYPE                  
      , GUNSTOCK                 
      , DELIVERY                 
      , NOTE                     
      , Overhead                 
      , IndirectLabor            
      , DirectLabor              
      , MaterialCost             
      , SubContractor            
      , SUB2                     
      , SUB3                     
      , FREIGHT                  
      , EXCISE                   
      , CALIBER                  
      , COMPANY_#                
      , DIVISION_#               
      , ACCOUNT_ID               
      , NSN_#                    
      , FS_#                     
      , VENDOR_INFO              
      , DESC_2                   
      , RESERVED                 
      , INTERNAT_FLAG            
      , PRICE_EDIT               
      , INSPECT_FLAG             
      , SCRAP                    
      , COSTSCRAP                
      , PURCH_FLAG               
      , RECEIVE_TO               
      , SCOMPANY_#               
      , SDIVISION_#              
      , SACCOUNT_ID              
      , PR_SHT_DESC              
      , RAW_ASSIGNED             
      , FREIGHT_FLAG             
      , BREAKDOWN_FLAG           
      , GROUP1                   
      , RPT_GROUP                
      , LOT_SIZE                 
      , CUSTOM_COUNT             
      , SERIAL_FLAG              
      , WHLS_QTY1                
      , WHLS_PRCNT1              
      , WHLS_QTY2                
      , WHLS_PRCNT2              
      , WHLS_QTY3                
      , WHLS_PRCNT3              
      , WHLS_QTY4                
      , WHLS_PRCNT4              
      , DLR_QTY1                 
      , DLR_PRCNT1               
      , DLR_QTY2                 
      , DLR_PRCNT2               
      , DLR_QTY3                 
      , DLR_PRCNT3               
      , DLR_QTY4                 
      , DLR_PRCNT4               
      , RTL_QTY1                 
      , RTL_PRCNT1               
      , RTL_QTY2                 
      , RTL_PRCNT2               
      , RTL_QTY3                 
      , RTL_PRCNT3               
      , RTL_QTY4                 
      , RTL_PRCNT4               
      , WHOLESALE                
      , VENDOR_ID                
      , FIREARM_FLAG             
      , TAX_FLAG                 
      , EXCISE_TYPE              
      , UOM_DESC                 
      , LEAD_TIME                
      , INVAVGPRICE              
      , WOASSIGNED               
      , OEASSIGNED               
      , BARREL_LENGTH            
      , FINISH                   
      , SELLABLE                 
      , ACTIVE                   
      , DRAWING_NUMBER           
      , REVISION_NUMBER          
      , Sale_Notes               
      , Tech_Notes               
      , Part_Type                
      , Part_Category            
      , LawEnf_Price             
      , Star_Price               
      , BoxStore_Price           
      , BuyGroup_Price           
      , HASSERIAL                
      , CreatedBy                
      , CreatedDate              
      , ChangedBy                
      , ChangedDate              
      , Version                  
      , UpdateSysInven           
      , Capacity                 
      , Location                 
      , Aisle                    
      , Rack                     
      , Tier                     
      , Bin                      
      , ExciseTaxTotalMatCost    
      , ExciseTaxTotalMatTaxCost 
      , ExciseTaxLaborCost       
      , ExciseTaxRatio           
      , ExciseTaxAdjustedTax     
      , ExciseTaxLaborTaxCost    
      , ThreadedBarrel           
      , SubCategory              
      , Packed                   
      , PulledToWO               
	FROM
		[$(SpringfieldProd)].dbo.parts ;
	SET IDENTITY_INSERT dbo.parts OFF ;
END


IF NOT EXISTS( SELECT 1 FROM dbo.SMSUPPLY )
BEGIN
	SET IDENTITY_INSERT dbo.SMSUPPLY ON ;
    INSERT INTO
        dbo.SMSUPPLY( 
			Recnum   
		  , SUPPLIER 
		  , NAME     
		  , STREET   
		  , CITY     
		  , STATE    
		  , FFLNUM )   
	SELECT 
		Recnum   
      , SUPPLIER 
      , NAME     
      , STREET   
      , CITY     
      , STATE    
      , FFLNUM   
	FROM
		[$(SpringfieldProd)].dbo.SMSUPPLY ;
	SET IDENTITY_INSERT dbo.SMSUPPLY OFF ;
END


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO

PRINT N'Creating Backup';



BACKUP DATABASE 
	[CampPerry] 
		TO DISK = N'$(BackupPath)$(BackupFile)' WITH 
			DESCRIPTION = N'Backup Copy for Laptop Deployment'
		  , NOFORMAT, NOINIT
		  , NAME = N'CampPerry Full Backup'
		  , SKIP, NOREWIND, NOUNLOAD, NO_COMPRESSION
		  , STATS = 10 ; 
GO

PRINT N'CampPerry Published and Deployed.';


GO